#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Sep 15 15:34:49 2019

@author: hwan
"""

import sys
sys.path.append('../')

import dolfin as dl
from forward_solve import Fin
from thermal_fin import get_space
from gaussian_field import make_cov_chol

import numpy as np
import matplotlib.pyplot as plt
from Autoencoder_Fwd_Inv_NN import AutoencoderFwdInv
from parameter_generator import ParameterGeneratorNineValues, ConvertArraytoDolfinFunction

import pdb #Equivalent of keyboard in MATLAB, just add "pdb.set_trace()"

import os
import sys
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
os.environ['OMP_NUM_THREADS'] = '6'
sys.path.insert(0, '../../Utilities/')

###############################################################################
#                               Parameters                                    #
###############################################################################
class RunOptions:
    num_hidden_nodes = 200
    penalty = 1
    num_training_data = 10
    batch_size = 4
    num_batches = int(num_training_data/batch_size)
    num_epochs = 1000
    gpu    = '0'
    
    filename = f'hnodes{num_hidden_nodes}_pen{penalty}_data{num_training_data}_batch{batch_size}_epochs{num_epochs}'
    savefilepath = 'Models/' + filename
    savefilename = savefilepath + '/' + filename
   
###############################################################################
#                                  Driver                                     #
###############################################################################
if __name__ == "__main__":
    V = get_space(40)
    solver = Fin(V) 
    
    #######################
    #   Form Predictions  #
    #######################
    #=== Forward Prediction ===#
    parameter_test, parameter_test_dl = ParameterGeneratorNineValues(V,solver)    
    state_pred = ae.forward_problem_prediction(parameter_test.reshape(1,parameter_test.shape[0]))
      
    #=== Inverse Prediction ===#
    state_test_dl,_, _, _,_ = solver.forward(parameter_test_dl)
    state_test = state_data_dl.vector().get_local()
    parameter_pred = ae.inverse_problem_prediction(state_test.reshape(1,state_test.shape[0]))
    
    ##############
    #  Plotting  #
    ##############
    #=== Plotting test parameter and test state ===#
    p = dl.plot(parameter_test_dl)
    plt.show()
    dl.plot(state_test_dl)
    plt.show()
    
    #=== Plotting predictions of test parameter and test state ===#
    parameter_pred_dl = ConvertArraytoDolfinFunction(V,parameter_pred)
    state_pred_dl = ConvertArraytoDolfinFunction(V,state_pred)
    p = dl.plot(parameter_pred_dl)
    plt.show()
    dl.plot(state_pred_dl)
    plt.show()
     